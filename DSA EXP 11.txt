CODE
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_VERTICES 100

typedef struct Graph {
    int numVertices;
    int adjMatrix[MAX_VERTICES][MAX_VERTICES];
} Graph;

// Function to create a graph
Graph* createGraph(int vertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = vertices;

    // Initialize the adjacency matrix
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            graph->adjMatrix[i][j] = 0;
        }
    }

    return graph;
}

// Function to add an edge to the graph
void addEdge(Graph* graph, int src, int dest) {
    graph->adjMatrix[src][dest] = 1;
}

// Function for BFS
void bfs(Graph* graph, int startVertex) {
    bool visited[MAX_VERTICES] = {false};
    int queue[MAX_VERTICES], front = -1, rear = -1;

    visited[startVertex] = true;
    queue[++rear] = startVertex;
    front++;

    printf("BFS Traversal: ");

    while (front <= rear) {
        int currentVertex = queue[front++];
        printf("%d ", currentVertex);

        for (int i = 0; i < graph->numVertices; i++) {
            if (graph->adjMatrix[currentVertex][i] == 1 && !visited[i]) {
                visited[i] = true;
                queue[++rear] = i;
            }
        }
    }
    printf("\n");
}

// Function for DFS
void dfsUtil(Graph* graph, int vertex, bool visited[]) {
    visited[vertex] = true;
    printf("%d ", vertex);

    for (int i = 0; i < graph->numVertices; i++) {
        if (graph->adjMatrix[vertex][i] == 1 && !visited[i]) {
            dfsUtil(graph, i, visited);
        }
    }
}

void dfs(Graph* graph, int startVertex) {
    bool visited[MAX_VERTICES] = {false};

    printf("DFS Traversal: ");
    dfsUtil(graph, startVertex, visited);
    printf("\n");
}

int main() {
    int vertices, edges, src, dest;
    printf("Enter number of vertices: ");
    scanf("%d", &vertices);
    
    Graph* graph = createGraph(vertices);

    printf("Enter number of edges: ");
    scanf("%d", &edges);
    for (int i = 0; i < edges; i++) {
        printf("Enter edge (src dest): ");
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }

    int startVertex;
    printf("Enter starting vertex for BFS and DFS: ");
    scanf("%d", &startVertex);

    bfs(graph, startVertex);
    dfs(graph, startVertex);

    // Free the allocated memory
    free(graph);
    
    return 0;
}

OUTPUT

Enter number of vertices: 6
Enter number of edges: 6
Enter edge (src dest): 10
5
Enter edge (src dest): 15
4
Enter edge (src dest): 20
3
Enter edge (src dest): 25
2
Enter edge (src dest): 30
1
Enter edge (src dest): 35
6
Enter starting vertex for BFS and DFS: 10
BFS Traversal: 10 5 
DFS Traversal: 10 5 


=== Code Execution Successful ===